import { FormEvent, useState } from "react";
import {
  GroupMatches,
  GroupStanding,
  PoolMatches,
  PoolStanding,
  Team,
  TeamStanding,
} from "../behaviors/TournamentUtils";
import "./TournamentFixture.scss";

// ========= START DUMMY =========
// Dummy data for simulation and finalizing idea.
const standingHeaders = [
  "Team",
  "Match Played",
  "Match Point",
  "Set Played",
  "Earned Score",
  "Lost Score",
  "APD",
];

// Key needs to be autogenerated based on total number of pools requested.
const poolNames = ["Pool A", "Pool B", "Pool C"];

const groupStandingData = {
  "Group-1": [
    {
      team: { name: "Legend-2" },
      matchPlayed: 2,
      matchPoint: 4,
      setPlayed: 5,
      earnedScore: 74,
      lostScore: 48,
    },
    {
      team: { name: "Sports BD" },
      matchPlayed: 2,
      matchPoint: 2,
      setPlayed: 4,
      earnedScore: 45,
      lostScore: 52,
    },
    {
      team: { name: "Tarchera-6" },
      matchPlayed: 2,
      matchPoint: 0,
      setPlayed: 5,
      earnedScore: 55,
      lostScore: 74,
    },
  ],
  "Group-2": [
    {
      team: { name: "Tarchera-0" },
      matchPlayed: 3,
      matchPoint: 6,
      setPlayed: 7,
      earnedScore: 104,
      lostScore: 80,
    },
    {
      team: { name: "Ogose Wolves" },
      matchPlayed: 3,
      matchPoint: 4,
      setPlayed: 7,
      earnedScore: 94,
      lostScore: 78,
    },
    {
      team: { name: "Tarchera-4" },
      matchPlayed: 3,
      matchPoint: 2,
      setPlayed: 7,
      earnedScore: 82,
      lostScore: 101,
    },
  ],
  "Group-3": [
    {
      team: { name: "Tarchera-0" },
      matchPlayed: 3,
      matchPoint: 6,
      setPlayed: 7,
      earnedScore: 104,
      lostScore: 80,
    },
    {
      team: { name: "Ogose Wolves" },
      matchPlayed: 3,
      matchPoint: 4,
      setPlayed: 7,
      earnedScore: 94,
      lostScore: 78,
    },
    {
      team: { name: "Tarchera-4" },
      matchPlayed: 3,
      matchPoint: 2,
      setPlayed: 7,
      earnedScore: 82,
      lostScore: 101,
    },
  ],
  "Group-4": [
    {
      team: { name: "Tarchera-0" },
      matchPlayed: 3,
      matchPoint: 6,
      setPlayed: 7,
      earnedScore: 104,
      lostScore: 80,
    },
    {
      team: { name: "Ogose Wolves" },
      matchPlayed: 3,
      matchPoint: 4,
      setPlayed: 7,
      earnedScore: 94,
      lostScore: 78,
    },
    {
      team: { name: "Tarchera-4" },
      matchPlayed: 3,
      matchPoint: 2,
      setPlayed: 7,
      earnedScore: 82,
      lostScore: 101,
    },
  ],
} as GroupStanding;

const groupMatches = {
  "Group-1": [
    {
      teams: [{ name: "Sports BD" } as Team, { name: "Legend-2" } as Team],
      winner: 1,
    },
    {
      teams: [{ name: "Sports BD" } as Team, { name: "Tarchera-6" } as Team],
      winner: 0,
    },
    { teams: [{ name: "Legend-2" } as Team, { name: "Tarchera-6" } as Team] },
  ],
  "Group-2": [
    {
      teams: [{ name: "Sports BD" } as Team, { name: "Legend-2" } as Team],
      winner: 1,
    },
    {
      teams: [{ name: "Sports BD" } as Team, { name: "Tarchera-6" } as Team],
      winner: 0,
    },
    { teams: [{ name: "Legend-2" } as Team, { name: "Tarchera-6" } as Team] },
  ],
} as GroupMatches;

const poolStandingData = {
  "Pool A": {
    "Pool A-1": [
      {
        team: { name: "Tarchera-1" },
        matchPlayed: 3,
        matchPoint: 4,
        setPlayed: 8,
        earnedScore: 104,
        lostScore: 89,
      },
      {
        team: { name: "Mars" },
        matchPlayed: 3,
        matchPoint: 4,
        setPlayed: 7,
        earnedScore: 92,
        lostScore: 81,
      },
      {
        team: { name: "Legend-4" },
        matchPlayed: 3,
        matchPoint: 4,
        setPlayed: 8,
        earnedScore: 97,
        lostScore: 96,
      },
      {
        team: { name: "Legend-2" },
        matchPlayed: 3,
        matchPoint: 0,
        setPlayed: 7,
        earnedScore: 73,
        lostScore: 100,
      },
    ],
    "Pool A-2": [
      {
        team: { name: "Tarchera-0" },
        matchPlayed: 3,
        matchPoint: 6,
        setPlayed: 7,
        earnedScore: 104,
        lostScore: 80,
      },
      {
        team: { name: "Ogose Wolves" },
        matchPlayed: 3,
        matchPoint: 4,
        setPlayed: 7,
        earnedScore: 94,
        lostScore: 78,
      },
      {
        team: { name: "Tarchera-4" },
        matchPlayed: 3,
        matchPoint: 2,
        setPlayed: 7,
        earnedScore: 82,
        lostScore: 101,
      },
      {
        team: { name: "Hotshots" },
        matchPlayed: 3,
        matchPoint: 0,
        setPlayed: 7,
        earnedScore: 81,
        lostScore: 102,
      },
    ],
  },
  "Pool B": {
    "Pool B-1": [
      {
        team: { name: "Tarchera-3" },
        matchPlayed: 3,
        matchPoint: 4,
        setPlayed: 7,
        earnedScore: 102,
        lostScore: 79,
      },
      {
        team: { name: "Tarchera-2" },
        matchPlayed: 3,
        matchPoint: 4,
        setPlayed: 7,
        earnedScore: 92,
        lostScore: 74,
      },
      {
        team: { name: "Vai Vai" },
        matchPlayed: 3,
        matchPoint: 2,
        setPlayed: 7,
        earnedScore: 87,
        lostScore: 96,
      },
      {
        team: { name: "Sports BD" },
        matchPlayed: 3,
        matchPoint: 2,
        setPlayed: 7,
        earnedScore: 70,
        lostScore: 102,
      },
    ],
  },
  "Pool C": {
    "Pool C-1": [
      {
        team: { name: "Tarchera-6" },
        matchPlayed: 3,
        matchPoint: 6,
        setPlayed: 6,
        earnedScore: 90,
        lostScore: 49,
      },
      {
        team: { name: "Lazy Potato" },
        matchPlayed: 3,
        matchPoint: 4,
        setPlayed: 6,
        earnedScore: 79,
        lostScore: 63,
      },
      {
        team: { name: "Tarchera-7" },
        matchPlayed: 3,
        matchPoint: 2,
        setPlayed: 6,
        earnedScore: 67,
        lostScore: 74,
      },
      {
        team: { name: "Broken-Jet" },
        matchPlayed: 3,
        matchPoint: 0,
        setPlayed: 6,
        earnedScore: 40,
        lostScore: 90,
      },
    ],
    "Pool C-2": [
      {
        team: { name: "Tarchera-5" },
        matchPlayed: 3,
        matchPoint: 6,
        setPlayed: 7,
        earnedScore: 99,
        lostScore: 72,
      },
      {
        team: { name: "Legend-1" },
        matchPlayed: 3,
        matchPoint: 4,
        setPlayed: 6,
        earnedScore: 79,
        lostScore: 79,
      },
      {
        team: { name: "Bits and Bytes" },
        matchPlayed: 3,
        matchPoint: 2,
        setPlayed: 7,
        earnedScore: 94,
        lostScore: 91,
      },
      {
        team: { name: "Gunma lions" },
        matchPlayed: 3,
        matchPoint: 0,
        setPlayed: 6,
        earnedScore: 60,
        lostScore: 90,
      },
    ],
  },
} as PoolStanding;

const poolMatchData = {
  "Pool A": {
    "Pool A-1": [
      { teams: [{ name: "Legend-2" }, { name: "Mars" }], winner: 1 },
      { teams: [{ name: "Legend-2" }, { name: "Legend-4" }], winner: 1 },
      { teams: [{ name: "Legend-2" }, { name: "Tarchera-1" }], winner: 0 },
      { teams: [{ name: "Mars" }, { name: "Legend-4" }] },
      { teams: [{ name: "Mars" }, { name: "Tarchera-1" }], winner: 1 },
      { teams: [{ name: "Legend-4" }, { name: "Tarchera-1" }], winner: 1 },
    ],
    "Pool A-2": [
      { teams: [{ name: "Legend-2" }, { name: "Mars" }], winner: 1 },
      { teams: [{ name: "Legend-2" }, { name: "Legend-4" }], winner: 1 },
      { teams: [{ name: "Legend-2" }, { name: "Tarchera-1" }], winner: 0 },
      { teams: [{ name: "Mars" }, { name: "Legend-4" }] },
      { teams: [{ name: "Mars" }, { name: "Tarchera-1" }], winner: 1 },
      { teams: [{ name: "Legend-4" }, { name: "Tarchera-1" }], winner: 1 },
    ],
  },
  "Pool B": {
    "Pool B-1": [
      { teams: [{ name: "Legend-2" }, { name: "Mars" }], winner: 1 },
      { teams: [{ name: "Legend-2" }, { name: "Legend-4" }], winner: 1 },
      { teams: [{ name: "Legend-2" }, { name: "Tarchera-1" }], winner: 0 },
      { teams: [{ name: "Mars" }, { name: "Legend-2" }] },
    ],
  },
} as PoolMatches;
// Dummy data for simulation and finalizing idea.
// ========= END DUMMY =========

const getAPD = (earnedScore: number, lostScore: number, setPlayed: number) => {
  return ((earnedScore - lostScore) / setPlayed).toFixed(2);
};

type PoolProps = {
  key: string;
  poolName: string;
  openDetails: boolean;
};
const DisplayIndividualPool = (props: PoolProps) => {
  const standing: JSX.Element[] = [];
  const matches: JSX.Element[] = [];
  const poolGroupStanding = poolStandingData[props.poolName];
  const poolGroupMatches = poolMatchData[props.poolName];
  let poolGroupName: keyof typeof poolGroupStanding;
  for (poolGroupName in poolGroupStanding) {
    standing.push(
      <div key={poolGroupName} className="group">
        <div className="group-header">
          <p className="group-name-standing">{poolGroupName}</p>
          <p className="marker-standing">Standing</p>
        </div>
        <div className="group-data">
          <div className="group-data-header">
            {standingHeaders.map((h) => {
              return <div key={h}>{h}</div>;
            })}
          </div>
          {poolGroupStanding[poolGroupName].map(
            (teamStanding: TeamStanding, index: number) => {
              return (
                <div key={index} className="group-data-content">
                  <div>{teamStanding.team.name}</div>
                  <div>{teamStanding.matchPlayed}</div>
                  <div>{teamStanding.matchPoint}</div>
                  <div>{teamStanding.setPlayed}</div>
                  <div>{teamStanding.earnedScore}</div>
                  <div>{teamStanding.lostScore}</div>
                  <div>
                    {getAPD(
                      teamStanding.earnedScore,
                      teamStanding.lostScore,
                      teamStanding.setPlayed
                    )}
                  </div>
                </div>
              );
            }
          )}
        </div>
      </div>
    );
  }

  if (poolGroupMatches) {
    Object.entries(poolGroupMatches).forEach(([groupName, groupMatches]) => {
      matches.push(
        <div key={groupName} className="group">
          <div className="group-header">
            <p className="group-name-match">{groupName}</p>
            <p className="marker-match">Match</p>
          </div>
          <div className="round">
            {groupMatches.map((match, index) => {
              return (
                <ul key={index} className="matchup">
                  <li
                    className={`team team-top ${
                      match.winner === 0 && "winner"
                    }`}
                  >
                    {match.teams[0].name}
                  </li>
                  <li
                    className={`team team-bottom ${
                      match.winner === 1 && "winner"
                    }`}
                  >
                    {match.teams[1].name}
                  </li>
                </ul>
              );
            })}
          </div>
        </div>
      );
    });
  }

  return (
    <details open={props.openDetails}>
      <summary className="pool-name">{props.poolName}</summary>
      <div className="pool-content">
        <section className="standing">{standing}</section>
        <section className="plain-match">{matches}</section>
      </div>
    </details>
  );
};

const DisplayAllPools = () => {
  const domElements: JSX.Element[] = [];

  poolNames.forEach((poolName, index) => {
    domElements.push(
      <DisplayIndividualPool
        key={poolName}
        poolName={poolName}
        openDetails={index === 0}
      />
    );
  });

  return <>{domElements}</>;
};

const DisplayAllGroups = () => {
  const standingDomElements: JSX.Element[] = [];
  let standingGroupName: keyof typeof groupStandingData;
  for (standingGroupName in groupStandingData) {
    standingDomElements.push(
      <div key={standingGroupName} className="group">
        <div className="group-header">
          <p className="group-name-standing">{standingGroupName}</p>
          <p className="marker-standing">Standing</p>
        </div>
        <div className="group-data">
          <div className="group-data-header">
            {standingHeaders.map((h, index) => {
              return <div key={index}>{h}</div>;
            })}
          </div>
          {groupStandingData[standingGroupName].map((teamStanding, index) => {
            return (
              <div key={index} className="group-data-content">
                <div>{teamStanding.team.name}</div>
                <div>{teamStanding.matchPlayed}</div>
                <div>{teamStanding.matchPoint}</div>
                <div>{teamStanding.setPlayed}</div>
                <div>{teamStanding.earnedScore}</div>
                <div>{teamStanding.lostScore}</div>
                <div>
                  {getAPD(
                    teamStanding.earnedScore,
                    teamStanding.lostScore,
                    teamStanding.setPlayed
                  )}
                </div>
              </div>
            );
          })}
        </div>
      </div>
    );
  }

  const matchDomElements: JSX.Element[] = [];
  let matchGroupName: keyof typeof groupMatches;
  for (matchGroupName in groupMatches) {
    matchDomElements.push(
      <div key={matchGroupName} className="group">
        <div className="group-header">
          <p className="group-name-match">{matchGroupName}</p>
          <p className="marker-match">Match</p>
        </div>
        <div className="round">
          {groupMatches[matchGroupName].map((match, index) => {
            return (
              <ul key={index} className="matchup">
                <li
                  className={`team team-top ${match.winner === 0 && "winner"}`}
                >
                  {match.teams[0].name}
                </li>
                <li
                  className={`team team-bottom ${
                    match.winner === 1 && "winner"
                  }`}
                >
                  {match.teams[1].name}
                </li>
              </ul>
            );
          })}
        </div>
      </div>
    );
  }

  return (
    <>
      <section className="standing">{standingDomElements}</section>
      <section className="plain-match">{matchDomElements}</section>
    </>
  );
};

const TournamentFixture = () => {
  return (
    <div>
      <details className="group-stage" open>
        <summary className="group-stage-summary">Group Stage</summary>
        <DisplayAllGroups />
      </details>
      <details className="pool-stage">
        <summary className="pool-stage-summary">Pool Stage</summary>
        <DisplayAllPools />
      </details>
      <details>
        <summary className="knockout-stage-summary">Knockout</summary>
        <section className="bracket">
          <div className="knockout">
            <div className="round round-one">
              <ul className="matchup">
                <li className="team team-top winner">Bits and Bytes</li>
                <li className="team team-bottom">Rockette Riders</li>
              </ul>
              <ul className="matchup">
                <li className="team team-top">Bits and Bytes</li>
                <li className="team team-bottom winner">Rockette Riders</li>
              </ul>
              <ul className="matchup">
                <li className="team team-top winner">Bits and Bytes</li>
                <li className="team team-bottom">Rockette Riders</li>
              </ul>
              <ul className="matchup">
                <li className="team team-top">Bits and Bytes</li>
                <li className="team team-bottom winner">Rockette Riders</li>
              </ul>
            </div>

            <div className="round round-two">
              <ul className="matchup">
                <li className="team team-top ">Bits and Bytes</li>
                <li className="team team-bottom">Rockette Riders</li>
              </ul>
              <ul className="matchup">
                <li className="team team-top ">Bits and Bytes</li>
                <li className="team team-bottom">Rockette Riders</li>
              </ul>
            </div>

            <div className="round round-three">
              <ul className="matchup">
                <li className="team team-top"></li>
                <li className="team team-bottom"></li>
              </ul>
            </div>
          </div>
        </section>
      </details>
    </div>
  );
};

export default TournamentFixture;
